// This is your Prisma schema file

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Credits system
  credits       Int       @default(1000)
  creditsUsed   Int       @default(0)
  resetDate     DateTime  @default(now())

  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  toneProfiles  ToneProfile[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Board (Canvas/Project)
model Board {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  nodes       Node[]
  edges       Edge[]
  collaborators BoardCollaborator[]

  @@map("boards")
}

model BoardCollaborator {
  id        String   @id @default(cuid())
  boardId   String
  userId    String
  role      String   @default("editor") // viewer, editor, admin
  createdAt DateTime @default(now())

  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
  @@map("board_collaborators")
}

// Nodes (Content items on the canvas)
model Node {
  id        String   @id @default(cuid())
  boardId   String
  type      NodeType
  position  Json     // {x: number, y: number}
  data      Json     // Flexible data structure for each node type
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("nodes")
}

enum NodeType {
  TEXT
  VIDEO
  AUDIO
  PDF
  IMAGE
  WEB_PAGE
  AI_CHAT
  TONE_PROFILE
}

// Edges (Connections between nodes)
model Edge {
  id        String   @id @default(cuid())
  boardId   String
  source    String   // Node ID
  target    String   // Node ID
  type      String?  @default("default")
  animated  Boolean  @default(false)
  label     String?
  createdAt DateTime @default(now())

  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("edges")
}

// Uploaded Media & Processed Content
model Media {
  id            String    @id @default(cuid())
  nodeId        String?
  type          MediaType
  originalUrl   String
  storedUrl     String?
  fileName      String
  fileSize      Int?
  mimeType      String?

  // Processed content
  transcription String?   @db.Text
  extractedText String?   @db.Text
  metadata      Json?

  processedAt   DateTime?
  createdAt     DateTime  @default(now())

  @@map("media")
}

enum MediaType {
  VIDEO
  AUDIO
  PDF
  IMAGE
  DOCUMENT
}

// Tone Profiles (User's voice/style)
model ToneProfile {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  samples     String[] // Array of text samples
  analysis    Json?    // AI-analyzed style characteristics
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tone_profiles")
}

// AI Interactions Log
model AIInteraction {
  id          String   @id @default(cuid())
  userId      String
  boardId     String?
  nodeId      String?

  model       String   // gpt-4, claude-3, etc.
  action      String   // summarize, qa, generate, etc.
  prompt      String   @db.Text
  response    String   @db.Text

  tokensUsed  Int?
  creditsUsed Int      @default(1)

  createdAt   DateTime @default(now())

  @@map("ai_interactions")
}

// Templates
model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?  // video_script, blog_post, research, etc.
  isPublic    Boolean  @default(true)
  structure   Json     // Template structure (nodes, edges, instructions)
  createdBy   String?
  createdAt   DateTime @default(now())

  @@map("templates")
}
